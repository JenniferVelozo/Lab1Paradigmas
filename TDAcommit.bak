#lang racket
;TDA commit

;Constructor
;Dom: string x string x string
;Rec: una lista con 3 strings
(define commitCons (lambda (palabra1 palabra2 palabra3)
                (if (and (string? palabra1) (string? palabra2) (string? palabra3))
                    (list palabra1 palabra2 palabra3)
                    null)))

;Pertenencia
;Dom: lista
;Rec: un valor booleano
(define commit? (lambda (commit)
                    (if (and (list? commit)(= (length commit) 3) (string? (car commit)) (string? (cadr commit)) (string? (caddr commit)))
                        #t
                        #f)))

;Selectores
;Dom: lista
;Rec: un string o lista vac√≠a
(define autor (lambda (commit)
                        (if commit?
                            (car commit)
                            null
                            )))

(define mensaje (lambda (commit)
                    (if zonas?
                        (cadr commit)
                        null
                        )))

(define cambios(lambda (commit)
                    (if commit?
                        (caddr commit)
                        null
                        )))


(define palabra1 "Jennifer")
(define palabra2 "edicion")
(define palabra3 "cambios")
