#lang racket
;TDA zonas

;Constructor
;Dom: lista x lista x lista x lista
;Rec: una lista con 4 listas dentro
(define zonasCons (lambda (workspace index localR remoteR)
                (if (and (list? workspace) (list? index) (list? localR) (list? remoteR))
                    (list workspace index localR remoteR)
                    null)
                )
  )

;Pertenencia
;Dom: lista
;Rec: un valor booleano
(define zonasCons? (lambda (zonas)
                    (if (and (list? zonas) (= (length) 4) (list? (car zonas)) (list? (cadr zonas)) (list? (caddr zonas)) (list? (cadddr zonas)))
                        #t
                        #f)
                    )
  )

;Selectores
;Dom: la lista zonas
;Rec: un string o lista vac√≠a
(define zonaWorkspace (lambda (zonas)
                        (if zonasCons?
                            (car zonas)
                            null
                            )
                        )
  )

(define zonaIndex (lambda (zonas)
                    (if zonasCons?
                        (cadr zonas)
                        null
                        )
                    )
  )

(define zonaLocalR(lambda (zonas)
                    (if zonasCons?
                        (caddr zonas)
                        null
                        )
                    )
  )

(define zonaRemoteR (lambda (zonas)
                      (if zonasCons?
                          (cadddr zonas)
                          null
                          )
                      )
  )